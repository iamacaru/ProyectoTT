#include "../include/NutAngles.h"
#include "../include/SAT_Const.h"

#include <cmath>
#include <vector>

const std::vector<std::vector<double>> C = {
        {0, 0, 0, 0, 1, -1719960, -1742,  920250, 89},
        {0, 0, 0, 0, 2,  20620,     2,  -8950,    5},
        {-2, 0, 2, 0, 1,   460,     0,   -240,    0},
        {2, 0, -2, 0, 0,   110,     0,      0,    0},
        {-2, 0, 2, 0, 2,   -30,     0,     10,    0},
        {1,-1, 0,-1, 0,     -30,    0,       0,    0},
        {0,-2, 2,-2, 1,     -20,    0,      10,    0},
        {2, 0,-2, 0, 1,      10,    0,       0,    0},
        {0, 0, 2,-2, 2, -131870,  -16,   57360,  -31},
        {0, 1, 0, 0, 0,   14260,  -34,     540,   -1},
        {0, 1, 2,-2, 2,   -5170,   12,    2240,   -6},
        {0,-1, 2,-2, 2,    2170,   -5,    -950,    3},
        {0, 0, 2,-2, 1,    1290,    1,    -700,    0},
        {2, 0, 0,-2, 0,     480,    0,      10,    0},
        {0, 0, 2,-2, 0,    -220,    0,       0,    0},
        {0, 2, 0, 0, 0,     170,   -1,       0,    0},
        {0, 1, 0, 0, 1,    -150,    0,      90,    0},
        {0, 2, 2,-2, 2,    -160,    1,      70,    0},
        {0,-1, 0, 0, 1,    -120,    0,      60,    0},
        {-2, 0, 0, 2, 1,     -60,    0,      30,    0},
        {0,-1, 2,-2, 1,     -50,    0,      30,    0},
        {2, 0, 0,-2, 1,      40,    0,     -20,    0},
        {0, 1, 2,-2, 1,      40,    0,     -20,    0},
        {1, 0, 0,-1, 0,     -40,    0,       0,    0},
        {2, 1, 0,-2, 0,      10,    0,       0,    0},
        {0, 0,-2, 2, 1,      10,    0,       0,    0},
        {0, 1,-2, 2, 0,     -10,    0,       0,    0},
        {0, 1, 0, 0, 2,      10,    0,       0,    0},
        {-1, 0, 0, 1, 1,      10,    0,       0,    0},
        {0, 1, 2,-2, 0,     -10,    0,       0,    0},
        {0, 0, 2, 0, 2,  -22740,   -2,    9770,   -5},
        {1, 0, 0, 0, 0,    7120,    1,     -70,    0},
        {0, 0, 2, 0, 1,   -3860,   -4,    2000,    0},
        {1, 0, 2, 0, 2,   -3010,    0,    1290,   -1},
        {1, 0, 0,-2, 0,   -1580,    0,     -10,    0},
        {-1, 0, 2, 0, 2,    1230,    0,    -530,    0},
        {0, 0, 0, 2, 0,     630,    0,     -20,    0},
        {1, 0, 0, 0, 1,     630,    1,    -330,    0},
        {-1, 0, 0, 0, 1,    -580,   -1,     320,    0},
        {-1, 0, 2, 2, 2,    -590,    0,     260,    0},
        {1, 0, 2, 0, 1,    -510,    0,     270,    0},
        {0, 0, 2, 2, 2,    -380,    0,     160,    0},
        {2, 0, 0, 0, 0,     290,    0,     -10,    0},
        {1, 0, 2,-2, 2,     290,    0,    -120,    0},
        {2, 0, 2, 0, 2,    -310,    0,     130,    0},
        {0, 0, 2, 0, 0,     260,    0,     -10,    0},
        {-1, 0, 2, 0, 1,     210,    0,    -100,    0},
        {-1, 0, 0, 2, 1,     160,    0,     -80,    0},
        {1, 0, 0,-2, 1,    -130,    0,      70,    0},
        {-1, 0, 2, 2, 1,    -100,    0,      50,    0},
        {1, 1, 0,-2, 0,     -70,    0,       0,    0},
        {0, 1, 2, 0, 2,      70,    0,     -30,    0},
        {0,-1, 2, 0, 2,     -70,    0,      30,    0},
        {1, 0, 2, 2, 2,     -80,    0,      30,    0},
        {1, 0, 0, 2, 0,      60,    0,       0,    0},
        {2, 0, 2,-2, 2,      60,    0,     -30,    0},
        {0, 0, 0, 2, 1,     -60,    0,      30,    0},
        {0, 0, 2, 2, 1,     -70,    0,      30,    0},
        {1, 0, 2,-2, 1,      60,    0,     -30,    0},
        {0, 0, 0,-2, 1,     -50,    0,      30,    0},
        {1,-1, 0, 0, 0,      50,    0,       0,    0},
        {2, 0, 2, 0, 1,     -50,    0,      30,    0},
        {0, 1, 0,-2, 0,     -40,    0,       0,    0},
        {1, 0,-2, 0, 0,      40,    0,       0,    0},
        {0, 0, 0, 1, 0,     -40,    0,       0,    0},
        {1, 1, 0, 0, 0,     -30,    0,       0,    0},
        {1, 0, 2, 0, 0,      30,    0,       0,    0},
        {1,-1, 2, 0, 2,     -30,    0,      10,    0},
        {-1,-1, 2, 2, 2,     -30,    0,      10,    0},
        {-2, 0, 0, 0, 1,     -20,    0,      10,    0},
        {3, 0, 2, 0, 2,     -30,    0,      10,    0},
        {0,-1, 2, 2, 2,     -30,    0,      10,    0},
        {1, 1, 2, 0, 2,      20,    0,     -10,    0},
        {-1, 0, 2,-2, 1,     -20,    0,      10,    0},
        {2, 0, 0, 0, 1,      20,    0,     -10,    0},
        {1, 0, 0, 0, 2,     -20,    0,      10,    0},
        {3, 0, 0, 0, 0,      20,    0,       0,    0},
        {0, 0, 2, 1, 2,      20,    0,     -10,    0},
        {-1, 0, 0, 0, 2,      10,    0,     -10,    0},
        {1, 0, 0,-4, 0,     -10,    0,       0,    0},
        {-2, 0, 2, 2, 2,      10,    0,     -10,    0},
        {-1, 0, 2, 4, 2,     -20,    0,      10,    0},
        {2, 0, 0,-4, 0,     -10,    0,       0,    0},
        {1, 1, 2,-2, 2,      10,    0,     -10,    0},
        {1, 0, 2, 2, 1,     -10,    0,      10,    0},
        {-2, 0, 2, 4, 2,     -10,    0,      10,    0},
        {-1, 0, 4, 0, 2,      10,    0,       0,    0},
        {1,-1, 0,-2, 0,      10,    0,       0,    0},
        {2, 0, 2,-2, 1,      10,    0,     -10,    0},
        {2, 0, 2, 2, 2,     -10,    0,       0,    0},
        {1, 0, 0, 2, 1,     -10,    0,       0,    0},
        {0, 0, 4,-2, 2,      10,    0,       0,    0},
        {3, 0, 2,-2, 2,      10,    0,       0,    0},
        {1, 0, 2,-2, 0,     -10,    0,       0,    0},
        {0, 1, 2, 0, 1,      10,    0,       0,    0},
        {-1,-1, 0, 2, 1,      10,    0,       0,    0},
        {0, 0,-2, 0, 1,     -10,    0,       0,    0},
        {0, 0, 2,-1, 2,     -10,    0,       0,    0},
        {0, 1, 0, 2, 0,     -10,    0,       0,    0},
        {1, 0,-2,-2, 0,     -10,    0,       0,    0},
        {0,-1, 2, 0, 1,     -10,    0,       0,    0},
        {1, 1, 0,-2, 1,     -10,    0,       0,    0},
        {1, 0,-2, 2, 0,     -10,    0,       0,    0},
        {2, 0, 0, 2, 0,      10,    0,       0,    0},
        {0, 0, 2, 4, 2,     -10,    0,       0,    0},
        {0, 1, 0, 1, 0,      10,    0,       0,    0}
};

Matrix NutAngles(double Mjd_TT) {
    double T = (Mjd_TT - Constants::MJD_J2000) / 36525.0;
    double T2 = T * T;
    double T3 = T2 * T;

    double rev = 360 * 3600; // arcsec/revolution

    // Mean arguments of luni-solar motion

    // l   mean anomaly of the Moon
    // l'  mean anomaly of the Sun
    // F   mean argument of latitude
    // D   mean longitude elongation of the Moon from the Sun
    // Om  mean longitude of the ascending node

    double l = fmod(485866.733 + (1325.0 * rev + 715922.633) * T + 31.310 * T2 + 0.064 * T3, rev);
    double lp = fmod(1287099.804 + (99.0 * rev + 1292581.224) * T - 0.577 * T2 - 0.012 * T3, rev);
    double F = fmod(335778.877 + (1342.0 * rev + 295263.137) * T - 13.257 * T2 + 0.011 * T3, rev);
    double D = fmod(1072261.307 + (1236.0 * rev + 1105601.328) * T - 6.891 * T2 + 0.019 * T3, rev);
    double Om = fmod(450160.280 - (5.0 * rev + 482890.539) * T + 7.455 * T2 + 0.008 * T3, rev);

    // Nutation in longitude and obliquity [rad]

    double dpsi = 0;
    double deps = 0;
    double arg = 0;

    for (const auto& coef : C) {
        arg = (coef[0] * l + coef[1] * lp + coef[2] * F + coef[3] * D + coef[4] * Om) / Constants::Arcs;
        dpsi += (coef[5] + coef[6] * T) * sin(arg);
        deps += (coef[7] + coef[8] * T) * cos(arg);
    }

    dpsi *= 1.0e-5 / Constants::Arcs;
    deps *= 1.0e-5 / Constants::Arcs;

    double values[] = {dpsi, deps};

    return {1, 2, values, 2};
}
